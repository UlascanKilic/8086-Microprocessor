;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Tue Nov 2020
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

CODE    SEGMENT PUBLIC 'CODE'
        ASSUME CS:CODE

START:

	MOV AL, 90H ; Control Word değerim
	;Port A - Input
	;Port B, Port C Lower ve Port C Upper Output olmak üzere Control Word adresim : 1001 0000b değeri oluyor.
	
	OUT 46H, AL ; Başlangıç değerim 40H ve Port A'yı göstermek üzere, Control Word'ü gösterebileceğim adres olarak 46H 'ı belirledim.
	       
ENDLESS:

	 IN AL, 40H ;Port A yı dinlemeye alıyorum.
			  
	 CMP AL, 0F0H ;AL-F0 işlemi yapıp aslında seçili olan lojik anahtar değerini belirliyorum.
	  ;Eğer lojik anahtar değeri 1 ise AL değerimin yüksek anlamlı 4 biti F olacaktır ve AL nin düşük anlamlı 4 bitini gözetmeksizin 
	  ; AL-F0 işlemi pozitif olacaktır ve bu durumda Sign Flag set olmayacak ve 0 olacaktır. Bu durumda lojik anahtarın 1 seçili olduğunu anlayabiliriz.
	  ;Eğer lojik anahtar değeri 0 ise AL değerimin yüksek anlamlı 4 bitinden 7 değeri gelecektir
	  ;AL-F0 işlemi negatif olacağından Sign Flag set olacaktır. Bu durumda lojik anahtarın 0 seçili olduğunu anlayabiliriz
	  
	 JS YARI ; Yapılan CMP işlemi sonucunda işaretli bir sayı oluştu ise Sign Flag set olacaktır ve program akışım YARI label'inden devam edecektir.
	 
	 
IKI_KATI:		 
         AND AL, 0FH ; A portunda kullanmadığım yüksek anlamlı 4 biti maskeliyorum. 
	 SHL AL,1 ; AL de bulunan değerleri 1 birim sola kaydırıp AL yi iki katına çıkarıyorum	 
	 OUT 42H, AL ;AL değerini B portuna yazıyorum
	 JMP ENDLESS
	
YARI:
	 AND AL, 0FH ; A portunda kullanmadığım yüksek anlamlı 4 biti maskeliyorum.
	 SHR AL, 1 ; AL de bulunan değerleri 1 birim sağa kaydırıp AL yi yarı değerine düşürüyorum.
	 OUT 42H, AL;AL değerini B portuna yazıyorum

        JMP ENDLESS
CODE    ENDS
        END START
	